@*
	<span class="d-flex">
	<a href="/ChangeCulture?name=fa" class="nav-link text-dark">
	فارسی
	<span class="flag-icon flag-icon-ir"></span>
	</a>
	<a href="/ChangeCulture?name=en" class="nav-link text-dark">
	English
	<span class="flag-icon flag-icon-us"></span>
	</a>
	</span>
*@



@{
	//var currentCultureName =
	//	System.Threading.Thread.CurrentThread.CurrentUICulture.Name
	//	.Substring(startIndex: 0, length: 2)
	//	.ToLower()
	//	;

	//var currentCultureName =
	//	System.Threading.Thread.CurrentThread
	//	.CurrentUICulture.TwoLetterISOLanguageName;
}

@*
	<span class="d-flex">
	@if (currentCultureName != "fa")
	{
	<a href="/ChangeCulture?name=fa" class="nav-link text-dark">
	فارسی
	<span class="flag-icon flag-icon-ir"></span>
	</a>
	}

	@if (currentCultureName != "en")
	{
	<a href="/ChangeCulture?name=en" class="nav-link text-dark">
	English
	<span class="flag-icon flag-icon-us"></span>
	</a>
	}
	</span>
*@



@*
	@inject Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.RequestLocalizationOptions>? requestLocalizationOptions

	@{
	if (requestLocalizationOptions == null)
	{
	return;
	}

	if (requestLocalizationOptions.Value == null)
	{
	return;
	}

	var supportedUICultures =
	requestLocalizationOptions.Value.SupportedUICultures;

	if (supportedUICultures == null)
	{
	return;
	}

	if (supportedUICultures?.Count <= 1)
	{
	return;
	}

	var currentCultureName =
	System.Threading.Thread
	.CurrentThread.CurrentUICulture.Name;
	}

	<span class="d-flex">
	@foreach (var item in supportedUICultures!)
	{
	//var name = item.Name;
	//var nativeName = item.NativeName;
	//var displayName = item.DisplayName;
	//var englishName = item.EnglishName;

	var country = item.Name[3..].ToLower();
	var language = item.NativeName[..(item.NativeName.IndexOf('(') - 1)];

	if (currentCultureName != item.Name)
	{
	<a href="/ChangeCulture/@(item.Name)" class="nav-link text-dark">
	@(language)
	<span class="flag-icon flag-icon-@(country)"></span>
	</a>
	}
	}
	</span>
*@



@inject Microsoft.Extensions.Options.IOptions<Infrastructure.Settings.ApplicationSettings> applicationSettingsOptions

@{
	var applicationSettings =
		applicationSettingsOptions.Value;

	if (applicationSettings == null)
	{
		return;
	}

	var cultureSettings =
		applicationSettings.CultureSettings;

	if (cultureSettings == null)
	{
		return;
	}

	var supportedCultureNames =
		cultureSettings.SupportedCultureNames;

	if (supportedCultureNames == null || supportedCultureNames.Length <= 1)
	{
		return;
	}

	var currentCultureName =
		System.Threading.Thread
		.CurrentThread.CurrentUICulture.Name;
}

<span class="d-flex">
	@foreach (var supportedCultureName in supportedCultureNames)
	{
		var supportedCulture = new System.Globalization.CultureInfo(name: supportedCultureName);

		var country = supportedCultureName[3..].ToLower();

		var language = supportedCulture.NativeName[..(supportedCulture.NativeName.IndexOf('(') - 1)];

		if (currentCultureName != supportedCultureName)
		{
			<a href="/ChangeCulture/@(supportedCultureName)" class="nav-link text-dark">
				@(language)
				<span class="flag-icon flag-icon-@(country)"></span>
			</a>
		}
	}
</span>

